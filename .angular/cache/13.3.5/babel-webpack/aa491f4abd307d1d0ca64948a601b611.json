{"ast":null,"code":"import { environment } from '@environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport { AppHttpErrorHandler } from '@app/core/utils/errorHandler';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService extends AppHttpErrorHandler {\n    constructor(http, router, toast) {\n      super(router, toast);\n      this.http = http;\n      this.router = router;\n      this.toast = toast;\n      this.BASEURL = environment.baseUrlApiUser;\n    }\n\n    authenticate(userLogin) {\n      return this.http.post(this.BASEURL + 'useritems/authenticate', userLogin).pipe(catchError(err => this.handleError(err)));\n    }\n\n    createUser(userModel) {\n      const params = {\n        userName: userModel.userName,\n        userPassword: userModel.userPassword,\n        userRole: userModel.userAdmin ? 'admin' : 'user'\n      };\n      return this.http.post(this.BASEURL + 'useritems', params);\n    }\n\n    updateUser(userModel) {\n      const params = {\n        userName: userModel.userName,\n        userPassword: userModel.userPassword,\n        userRole: userModel.userAdmin ? 'admin' : 'user'\n      };\n      return this.http.put(this.BASEURL + 'useritems/' + userModel.userName, params);\n    }\n\n    deleteUser(userName) {\n      return this.http.delete(this.BASEURL + 'useritems/' + userName);\n    }\n\n    getUsers() {\n      return this.http.get(this.BASEURL + 'useritems');\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}