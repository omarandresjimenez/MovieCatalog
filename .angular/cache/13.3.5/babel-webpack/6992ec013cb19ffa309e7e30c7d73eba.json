{"ast":null,"code":"import { BehaviorSubject, Observable, Subject, throwError } from 'rxjs';\nimport { shareReplay, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/api.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(service) {\n      this.service = service;\n      this.userSession$ = new Observable();\n      this.userSession = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n      this.newUserAdded$ = new Observable();\n      this.newUserAdded = new Subject();\n      this.userSession$ = this.userSession.asObservable();\n      this.newUserAdded$ = this.newUserAdded.asObservable();\n    }\n\n    authenticate(userInfo) {\n      this.service.authenticate(userInfo).pipe(shareReplay(1), catchError(err => throwError(err))).subscribe(res => {\n        localStorage.setItem('currentUser', JSON.stringify(res));\n        this.userSession.next(res);\n      });\n    }\n\n    notifyNewUser() {\n      this.newUserAdded.next();\n    }\n\n    getUsers() {\n      return this.service.getUsers();\n    }\n\n    getCurrentUser() {\n      return this.userSession.getValue();\n    }\n\n    createUser(userInfo) {\n      return this.service.createUser(userInfo);\n    }\n\n    updateUser(userInfo) {\n      return this.service.updateUser(userInfo);\n    }\n\n    deleteUser(userName) {\n      return this.service.deleteUser(userName);\n    }\n\n    closeSession() {\n      localStorage.removeItem('currentUser');\n      this.userSession.next(null);\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.ApiService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}